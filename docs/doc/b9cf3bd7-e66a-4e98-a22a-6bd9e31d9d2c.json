{
    "summary": "This code defines `BaseComputeMetrics` class for evaluating transformer model predictions, decoding generated IDs to text, and calculating metrics between predicted and target sequences. It also logs warning about prediction and target sequence shapes. The code computes accuracy, failed target extractions, and failed predictions.",
    "details": [
        {
            "comment": "This code is defining a class `BaseComputeMetrics` for computing metrics on evaluation predictions from transformers library. It initializes with a preprocessor and has methods to handle the evaluation predictions, decode the generated IDs into actual text using the tokenizer, and calculate the metric between the predicted and target sequences. The logger is set up to log warnings about the shapes of prediction and target sequences.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/dataset/utils/compute_metrics.py\":0-30",
            "content": "import sys\nimport logging\nfrom typing import Dict, Any, Sequence\nfrom transformers import EvalPrediction\nfrom ...utils import decode_generate_ids\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nlogging.basicConfig(\n    format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n    datefmt=\"%m/%d/%Y %H:%M:%S\",\n    handlers=[logging.StreamHandler(sys.stdout), ],\n)\nclass BaseComputeMetrics:\n    def __init__(self, preprocessor: Dict[str, Any]):\n        self.preprocessor = preprocessor\n        self.tokenizer = self.preprocessor['text']\n    def __call__(self, eval_preds: EvalPrediction) -> Dict[str, Any]:\n        preds, targets = eval_preds\n        logger.warning(f\"preds shape: {preds.shape}. targets shape: {targets.shape}\")\n        preds = decode_generate_ids(self.tokenizer, preds)\n        targets = decode_generate_ids(self.tokenizer, targets)\n        assert len(preds) == len(targets)\n        return self.calculate_metric(preds, targets)\n    def calculate_metric(self, preds: Sequence[str], targets: Sequence[str]) -> Dict[str, Any]:"
        },
        {
            "comment": "This code computes metrics for a machine learning model. It calculates accuracy, number of failed target extractions, and number of failed predictions. If the response string is truncated, it logs a warning. The extract_ans method must be implemented separately to extract answers from strings.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/dataset/utils/compute_metrics.py\":31-52",
            "content": "        correct = 0\n        failed = 0\n        target_failed = 0\n        for pred, target in zip(preds, targets):\n            extract_pred = self.extract_ans(pred)\n            extract_target = self.extract_ans(target)\n            if extract_target is None:\n                target_failed += 1\n                logger.warning(f\"failed to extract ans from target. maybe the response string is truncated: {target}.\")\n                continue\n            if extract_pred is None:\n                failed += 1\n            if extract_pred == extract_target:\n                correct += 1\n        return {\n            'accuracy': 1.0 * correct / len(targets),\n            'target_failed': target_failed,\n            'failed': failed,\n        }\n    def extract_ans(self, string: str):\n        raise NotImplementedError"
        }
    ]
}