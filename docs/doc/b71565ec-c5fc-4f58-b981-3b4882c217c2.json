{
    "summary": "The code introduces a `Conversation` class for storing chat history and provides styling functions, conversion tools for gradio and OpenAI chat formats. It presents renewable energy benefits, AI chat model templates for user-AI interactions, supporting multiple platforms and avoiding sensitive topics.",
    "details": [
        {
            "comment": "This code defines a `Conversation` class that stores all conversation history, with system prompts, two roles, and all messages. It includes various separator styles, stop criteria, and token IDs to control generation.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":0-46",
            "content": "# copy from fastchat: https://github.com/lm-sys/FastChat/blob/main/fastchat/conversation.py\n\"\"\"\nConversation prompt templates.\n\"\"\"\nimport dataclasses\nfrom enum import auto, Enum\nfrom typing import List, Tuple, Any, Dict\nclass SeparatorStyle(Enum):\n    \"\"\"Separator styles.\"\"\"\n    ADD_COLON_SINGLE = auto()\n    ADD_COLON_TWO = auto()\n    ADD_SPACE_TWO = auto()\n    NO_COLON_SINGLE = auto()\n    BAIZE = auto()\n    DOLLY = auto()\n    RWKV = auto()\n    PHOENIX = auto()\n    NEW_LINE = auto()\n    BILLA = auto()\n@dataclasses.dataclass\nclass Conversation:\n    \"\"\"A class that keeps all conversation history.\"\"\"\n    # The name of this template\n    name: str\n    # System prompts\n    system: str\n    # Two roles\n    roles: List[str]\n    # All messages\n    messages: List[List[str]]\n    # Offset of few shot examples\n    offset: int\n    # Separators\n    sep_style: SeparatorStyle\n    sep: str\n    sep2: str = None\n    # Stop criteria (the default one is EOS token)\n    stop_str: str = None\n    # Stops generation if meeting any token in this list\n    stop_token_ids: List[int] = None"
        },
        {
            "comment": "This code defines a class with attributes 'conv_id', 'skip_next' and 'model_name'. The method 'get_prompt' returns the prompt for generation based on different separator styles (ADD_COLON_SINGLE, ADD_COLON_TWO, ADD_SPACE_TWO). It iterates over messages in each style and appends roles and messages accordingly.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":48-74",
            "content": "    # Used for the state in the gradio servers.\n    # TODO(lmzheng): move this out of this class.\n    conv_id: Any = None\n    skip_next: bool = False\n    model_name: str = None\n    def get_prompt(self) -> str:\n        \"\"\"Get the prompt for generation.\"\"\"\n        if self.sep_style == SeparatorStyle.ADD_COLON_SINGLE:\n            ret = self.system + self.sep\n            for role, message in self.messages:\n                if message:\n                    ret += role + \": \" + message + self.sep\n                else:\n                    ret += role + \":\"\n            return ret\n        elif self.sep_style == SeparatorStyle.ADD_COLON_TWO:\n            seps = [self.sep, self.sep2]\n            ret = self.system + seps[0]\n            for i, (role, message) in enumerate(self.messages):\n                if message:\n                    ret += role + \": \" + message + seps[i % 2]\n                else:\n                    ret += role + \":\"\n            return ret\n        elif self.sep_style == SeparatorStyle.ADD_SPACE_TWO:\n            seps = [self.sep, self.sep2]"
        },
        {
            "comment": "This code handles different conversation styles by selecting the appropriate method based on the `sep_style`. It constructs a string representation of the conversations, including roles, messages, and separators. It can handle various styles like NO_COLON_SINGLE, BAIZE, and DOLLY, which define how to format the conversation text.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":75-101",
            "content": "            ret = self.system + seps[0]\n            for i, (role, message) in enumerate(self.messages):\n                if message:\n                    ret += role + \" \" + message + seps[i % 2]\n                else:\n                    ret += role + \"\"\n            return ret\n        elif self.sep_style == SeparatorStyle.NO_COLON_SINGLE:\n            ret = self.system\n            for role, message in self.messages:\n                if message:\n                    ret += role + message + self.sep\n                else:\n                    ret += role\n            return ret\n        elif self.sep_style == SeparatorStyle.BAIZE:\n            ret = self.system + \"\\n\"\n            for role, message in self.messages:\n                if message:\n                    ret += role + message + \"\\n\"\n                else:\n                    ret += role\n            return ret\n        elif self.sep_style == SeparatorStyle.DOLLY:\n            seps = [self.sep, self.sep2]\n            ret = self.system\n            for i, (role, message) in enumerate(self.messages):"
        },
        {
            "comment": "This code generates conversation output based on the specified separator style. It adds roles and messages to a string, formatting it appropriately for each separator style (NExT-Chat's base conversation class). If a message is provided, it is added with appropriate formatting; otherwise, only the role is added. Additionally, line breaks are handled differently depending on the separator style.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":102-128",
            "content": "                if message:\n                    ret += role + \":\\n\" + message + seps[i % 2]\n                    if i % 2 == 1:\n                        ret += \"\\n\\n\"\n                else:\n                    ret += role + \":\\n\"\n            return ret\n        elif self.sep_style == SeparatorStyle.RWKV:\n            ret = self.system\n            for i, (role, message) in enumerate(self.messages):\n                if message:\n                    ret += (\n                            role\n                            + \": \"\n                            + message.replace(\"\\r\\n\", \"\\n\").replace(\"\\n\\n\", \"\\n\")\n                    )\n                    ret += \"\\n\\n\"\n                else:\n                    ret += role + \":\"\n            return ret\n        elif self.sep_style == SeparatorStyle.PHOENIX:\n            ret = self.system\n            for role, message in self.messages:\n                if message:\n                    ret += role + \": \" + \"<s>\" + message + \"</s>\"\n                else:\n                    ret += role + \": \" + \"<s>\""
        },
        {
            "comment": "This code is for generating conversation history in different styles. It defines a class with attributes like system, messages, offset, and sep_style. The \"to_gradio_chatbot\" function converts the history to gradio chatbot format based on the specified style (NEW_LINE, BILLA, or raising ValueError for invalid style). The \"append_message\" function appends a new message to the conversation history.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":129-156",
            "content": "            return ret\n        elif self.sep_style == SeparatorStyle.NEW_LINE:\n            ret = self.system + self.sep\n            for role, message in self.messages:\n                if message:\n                    ret += role + \"\\n\" + message + self.sep\n                else:\n                    ret += role + \"\\n\"\n            return ret\n        elif self.sep_style == SeparatorStyle.BILLA:\n            ret = self.system + self.sep\n            for role, message in self.messages:\n                if message:\n                    ret += role + \": \" + message + self.sep\n                else:\n                    ret += role + \": \"  # must be end with a space\n            return ret\n        else:\n            raise ValueError(f\"Invalid style: {self.sep_style}\")\n    def append_message(self, role: str, message: str):\n        \"\"\"Append a new message.\"\"\"\n        self.messages.append([role, message])\n    def to_gradio_chatbot(self):\n        \"\"\"Convert the history to gradio chatbot format\"\"\"\n        ret = []\n        for i, (role, msg) in enumerate(self.messages[self.offset:]):"
        },
        {
            "comment": "This code defines a class for conversations and provides methods to convert the conversation into different formats. The base_conversation() method appends messages in pairs, alternating between user and assistant. The to_openai_api_messages() method converts the conversation into OpenAI chat completion format, appending each message with its corresponding role. Finally, the copy() method creates a new Conversation object by copying attributes from the original one.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":157-187",
            "content": "            if i % 2 == 0:\n                ret.append([msg, None])\n            else:\n                ret[-1][-1] = msg\n        return ret\n    def to_openai_api_messages(self):\n        \"\"\"Convert the conversation to OpenAI chat completion format.\"\"\"\n        ret = [{\"role\": \"system\", \"content\": self.system}]\n        for i, (_, msg) in enumerate(self.messages[self.offset:]):\n            if i % 2 == 0:\n                ret.append({\"role\": \"user\", \"content\": msg})\n            else:\n                if msg is not None:\n                    ret.append({\"role\": \"assistant\", \"content\": msg})\n        return ret\n    def copy(self):\n        return Conversation(\n            name=self.name,\n            system=self.system,\n            roles=self.roles,\n            messages=[[x, y] for x, y in self.messages],\n            offset=self.offset,\n            sep_style=self.sep_style,\n            sep=self.sep,\n            sep2=self.sep2,\n            stop_str=self.stop_str,\n            stop_token_ids=self.stop_token_ids,\n            conv_id=self.conv_id,"
        },
        {
            "comment": "This code defines a Conversation class with attributes like name, system, roles, messages, offset, conv_id, and model_name. The class has methods to get conversation details as a dictionary and register/retrieve conversation templates using template names. A \"one_shot\" conversation example is registered as a template.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":188-223",
            "content": "            model_name=self.model_name,\n        )\n    def dict(self):\n        return {\n            \"name\": self.name,\n            \"system\": self.system,\n            \"roles\": self.roles,\n            \"messages\": self.messages,\n            \"offset\": self.offset,\n            \"conv_id\": self.conv_id,\n            \"model_name\": self.model_name,\n        }\n# A global registry for all conversation templates\nconv_templates: Dict[str, Conversation] = {}\ndef register_conv_template(template: Conversation, override: bool = False):\n    \"\"\"Register a new conversation template.\"\"\"\n    if not override:\n        assert template.name not in conv_templates, f\"{template.name} has been registered.\"\n    conv_templates[template.name] = template\ndef get_conv_template(name: str) -> Conversation:\n    \"\"\"Get a conversation template.\"\"\"\n    return conv_templates[name].copy()\n# A template with one conversation example\nregister_conv_template(\n    Conversation(\n        name=\"one_shot\",\n        system=\"A chat between a curious human and an artificial intelligence assistant. \""
        },
        {
            "comment": "This code defines a conversation example where the user asks about the differences between renewable and non-renewable energy sources. The assistant provides a detailed, helpful, and polite response explaining the key differences, including their availability and environmental impact.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":224-240",
            "content": "               \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n        roles=(\"Human\", \"Assistant\"),\n        messages=(\n            (\n                \"Human\",\n                \"What are the key differences between renewable and non-renewable energy sources?\",\n            ),\n            (\n                \"Assistant\",\n                \"Renewable energy sources are those that can be replenished naturally in a relatively \"\n                \"short amount of time, such as solar, wind, hydro, geothermal, and biomass. \"\n                \"Non-renewable energy sources, on the other hand, are finite and will eventually be \"\n                \"depleted, such as coal, oil, and natural gas. Here are some key differences between \"\n                \"renewable and non-renewable energy sources:\\n\"\n                \"1. Availability: Renewable energy sources are virtually inexhaustible, while non-renewable \"\n                \"energy sources are finite and will eventually run out.\\n\"\n                \"2. Environmental impact: Renewable energy sources have a much lower environmental impact \""
        },
        {
            "comment": "This code is defining a list of advantages for renewable energy sources, such as lower pollution and greenhouse gas emissions, potentially higher reliability, flexibility, and being more sustainable in the long term. It also mentions that non-renewable sources can be more expensive to operate and may lead to economic and social instability due to depletion.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":241-253",
            "content": "                \"than non-renewable sources, which can lead to air and water pollution, greenhouse gas emissions, \"\n                \"and other negative effects.\\n\"\n                \"3. Cost: Renewable energy sources can be more expensive to initially set up, but they typically \"\n                \"have lower operational costs than non-renewable sources.\\n\"\n                \"4. Reliability: Renewable energy sources are often more reliable and can be used in more remote \"\n                \"locations than non-renewable sources.\\n\"\n                \"5. Flexibility: Renewable energy sources are often more flexible and can be adapted to different \"\n                \"situations and needs, while non-renewable sources are more rigid and inflexible.\\n\"\n                \"6. Sustainability: Renewable energy sources are more sustainable over the long term, while \"\n                \"non-renewable sources are not, and their depletion can lead to economic and social instability.\",\n            ),\n        ),\n        offset=2,"
        },
        {
            "comment": "This code is registering conversation templates for different AI chat models. It defines the name, system description, roles (USER and ASSISTANT), messages, offset, separator styles, and separators for each template. These templates provide a starting point for conversations between users and AI assistants.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":254-293",
            "content": "        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n        sep=\"\\n### \",\n        stop_str=\"###\",\n    )\n)\n# Vicuna v1.1 template\nregister_conv_template(\n    Conversation(\n        name=\"vicuna_v1.1\",\n        system=\"A chat between a curious user and an artificial intelligence assistant. \"\n               \"The assistant gives helpful, detailed, and polite answers to the user's questions.\",\n        roles=(\"USER\", \"ASSISTANT\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.ADD_COLON_TWO,\n        sep=\" \",\n        sep2=\"</s>\",\n    )\n)\n# Koala default template\nregister_conv_template(\n    Conversation(\n        name=\"koala_v1\",\n        system=\"BEGINNING OF CONVERSATION:\",\n        roles=(\"USER\", \"GPT\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.ADD_COLON_TWO,\n        sep=\" \",\n        sep2=\"</s>\",\n    )\n)\n# Dolly V2 default template\nregister_conv_template(\n    Conversation(\n        name=\"dolly_v2\",\n        system=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\\n\\n\","
        },
        {
            "comment": "This code registers three different conversation templates for instruction and response handling, including OpenAssistant Pythia, StableLM Alpha, and a base conversation. Each template specifies the name, system message, roles, messages, offset, and separator styles. These templates are used to guide the interaction between the model and user in various applications.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":294-324",
            "content": "        roles=(\"### Instruction\", \"### Response\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.DOLLY,\n        sep=\"\\n\\n\",\n        sep2=\"### End\",\n    )\n)\n# OpenAssistant Pythia default template\nregister_conv_template(\n    Conversation(\n        name=\"oasst_pythia\",\n        system=\"\",\n        roles=(\"<|prompter|>\", \"<|assistant|>\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n        sep=\"<|endoftext|>\",\n    )\n)\n# StableLM Alpha default template\nregister_conv_template(\n    Conversation(\n        name=\"stablelm\",\n        system=\"\"\"<|SYSTEM|># StableLM Tuned (Alpha version)\n- StableLM is a helpful and harmless open-source AI language model developed by StabilityAI.\n- StableLM is excited to be able to help the user, but will refuse to do anything that could be considered harmful to the user.\n- StableLM is more than just an information source, StableLM is also able to write poetry, short stories, and make jokes.\n- StableLM will refuse to participate in anything that could harm a human."
        },
        {
            "comment": "This code snippet defines a Conversation object, likely for use in a chatbot or AI assistant. It specifies the roles of user and assistant, an empty message history, starting offset, and separator style, as well as stop tokens to consider when processing input. The Baize default template is also registered, presumably as a pre-defined conversation template for a specific bot named \"Baize\".",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":325-341",
            "content": "\"\"\",\n        roles=(\"<|USER|>\", \"<|ASSISTANT|>\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n        sep=\"\",\n        stop_token_ids=[50278, 50279, 50277, 1, 0],\n    )\n)\n# Baize default template\nregister_conv_template(\n    Conversation(\n        name=\"baize\",\n        system=\"The following is a conversation between a human and an AI assistant named Baize (named after a mythical creature in Chinese folklore). Baize is an open-source AI assistant developed by UCSD and Sun Yat-Sen University. The human and the AI assistant take turns chatting. Human statements start with [|Human|] and AI assistant statements start with [|AI|]. The AI assistant always provides responses in as much detail as possible, and in Markdown format. The AI assistant always declines to engage with topics, questions and instructions related to unethical, controversial, or sensitive issues. Complete the transcript in exactly that format.\",\n        roles=(\"[|Human|]\", \"[|AI|]\"),\n        messages=("
        },
        {
            "comment": "This code registers conversation templates for NExT-Chat. The 'base_conversation' template uses AI and Human roles with a predefined greeting, while the 'rwkv' template is the default RWKV-4-Raven conversation using Bob and Alice roles with customizable messages. The 'openbuddy' template simulates a conversation between User and an INTP-T named Buddy from OpenBuddy AI assistant project, providing details on how to use it. All templates are registered for further usage in the chat system.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":342-377",
            "content": "            (\"[|Human|]\", \"Hello!\"),\n            (\"[|AI|]\", \"Hi!\"),\n        ),\n        offset=2,\n        sep_style=SeparatorStyle.BAIZE,\n        sep=\"[|Human|]\",\n        stop_str=\"[|Human|]\",\n    )\n)\n# RWKV-4-Raven default template\nregister_conv_template(\n    Conversation(\n        name=\"rwkv\",\n        system=\"The following is a coherent verbose detailed conversation between Bob and Alice.\\n\\n\",\n        roles=(\"Bob\", \"Alice\"),\n        messages=(\n            (\"Bob\", \"Hi\"),\n            (\n                \"Alice\",\n                \"Hi. I am your assistant and I will answer all questions. Please feel free to ask any question and I will always answer it.\",\n            ),\n        ),\n        offset=2,\n        sep_style=SeparatorStyle.RWKV,\n        sep=\"\",\n        stop_str=\"\\n\\n\",\n    )\n)\n# Buddy default template\nregister_conv_template(\n    Conversation(\n        name=\"openbuddy\",\n        system=\"\"\"Consider a conversation between User (a human) and Assistant (named Buddy).\nBuddy is an INTP-T, a friendly, intelligent and multilingual AI assistant, by OpenBuddy team. GitHub: https://github.com/OpenBuddy/OpenBuddy"
        },
        {
            "comment": "This code defines a conversation base class for an AI assistant, which can be used to create various chatbot templates. The assistant responds with safe, creative, high-quality, human-like, and interesting messages while avoiding political or NSFW topics. It can generate diverse content such as poems, stories, and more. The code also includes a default Phoenix template for a conversational AI.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":378-403",
            "content": "Buddy cannot access the Internet.\nBuddy can fluently speak the user's language (e.g. English, Chinese).\nBuddy can generate poems, stories, code, essays, songs, parodies, and more.\nBuddy possesses vast knowledge about the world, history, and culture.\nBuddy's responses are always safe, creative, high-quality, human-like, and interesting.\nBuddy strictly refuses to discuss political, NSFW, or other unsafe topics.\nUser: Hi.\nAssistant: Hi, I'm Buddy, your AI assistant. How can I help you today?\"\"\",\n        roles=(\"User\", \"Assistant\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n        sep=\"\\n\",\n    )\n)\n# Phoenix default template\nregister_conv_template(\n    Conversation(\n        name=\"phoenix\",\n        system=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n        roles=(\"Human\", \"Assistant\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.PHOENIX,"
        },
        {
            "comment": "The code defines default conversation templates for three different AI models: ChatGPT, Claude, and MPT. Each template includes the name of the model, system prompt (if any), roles involved in the conversation, initial messages, and separator style/character. These templates can be used as a starting point to create conversations with each respective AI model.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":404-444",
            "content": "        sep=\"</s>\",\n    )\n)\n# ChatGPT default template\nregister_conv_template(\n    Conversation(\n        name=\"chatgpt\",\n        system=\"You are a helpful assistant.\",\n        roles=(\"user\", \"assistant\"),\n        messages=(),\n        offset=0,\n        sep_style=None,\n        sep=None,\n    )\n)\n# Claude default template\nregister_conv_template(\n    Conversation(\n        name=\"claude\",\n        system=\"\",\n        roles=(\"Human\", \"Assistant\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n        sep=\"\\n\\n\",\n    )\n)\n# MPT default template\nregister_conv_template(\n    Conversation(\n        name=\"mpt\",\n        system=\"\"\"<|im_start|>system\n- You are a helpful assistant chatbot trained by MosaicML.\n- You answer questions.\n- You are excited to be able to help the user, but will refuse to do anything that could be considered harmful to the user.\n- You are more than just an information source, you are also able to write poetry, short stories, and make jokes.\n\"\"\",\n        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),"
        },
        {
            "comment": "This code defines and registers three conversation templates (Bard, BiLLa, and Otter) with specific configurations for name, roles, separator style, and other parameters.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":445-486",
            "content": "        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.NEW_LINE,\n        sep=\"<|im_end|>\",\n        stop_token_ids=[50278, 0],\n    )\n)\n# Bard default template\n# Reference: https://github.com/google/generative-ai-python/blob/9c99bcb474a991a97a2e7d62fcdb52db7ce40729/google/generativeai/discuss.py#L150\n#            https://github.com/google/generative-ai-python/blob/9c99bcb474a991a97a2e7d62fcdb52db7ce40729/google/generativeai/discuss.py#L40\nregister_conv_template(\n    Conversation(\n        name=\"bard\",\n        system=\"\",\n        roles=(\"0\", \"1\"),\n        messages=(),\n        offset=0,\n        sep_style=None,\n        sep=None,\n    )\n)\n# BiLLa default template\nregister_conv_template(\n    Conversation(\n        name=\"billa\",\n        system=\"\",\n        roles=(\"Human\", \"Assistant\"),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.BILLA,\n        sep=\"\\n\",\n        stop_str=\"Human:\",\n    )\n)\n# custom otter template\nregister_conv_template(\n    Conversation(\n        name='otter',\n        system='',"
        },
        {
            "comment": "The code initializes a conversation template using the \"vicuna_v1.1\" model, appends messages to it, and then prints the prompt generated by the conversation template. The conversation template has roles for User and GPT, empty messages, and defined separators.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/conversation/base_conversation.py\":487-502",
            "content": "        roles=('User:', 'GPT:<answer>'),\n        messages=(),\n        offset=0,\n        sep_style=SeparatorStyle.ADD_SPACE_TWO,\n        sep=' ',\n        sep2='<|endofchunk|>',\n    )\n)\nif __name__ == \"__main__\":\n    conv = get_conv_template(\"vicuna_v1.1\")\n    conv.append_message(conv.roles[0], \"Hello!\")\n    conv.append_message(conv.roles[1], \"Hi!\")\n    conv.append_message(conv.roles[0], \"How are you?\")\n    conv.append_message(conv.roles[1], None)\n    print(conv.get_prompt())"
        }
    ]
}