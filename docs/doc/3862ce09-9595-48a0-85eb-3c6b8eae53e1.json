{
    "summary": "The code defines a mixin class for question templates and creates MInstrDataset, which extends Dataset, utilizes the mixin, reads/processes data from files with indexing, length checks, and provides dataset details.",
    "details": [
        {
            "comment": "This code defines a class called \"QuestionTemplateMixin\" that serves as a mixin for other classes, allowing them to support question templates. The constructor accepts arguments like template_string, template_file, max_dynamic_size, and placeholders. If both template_string and template_file are provided, it raises an error. It also checks if either of them is None and raises a ValueError in that case.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/dataset/utils/mixin.py\":0-31",
            "content": "import json\nimport os\nimport numpy as np\nfrom torch.utils.data import Dataset\nfrom .io import read_img_general\nclass QuestionTemplateMixin:\n    def __init__(\n            self,\n            *args,\n            template_string=None,\n            template_file=None,\n            max_dynamic_size=None,\n            placeholders=None,\n            **kwargs\n    ):\n        super().__init__(*args, **kwargs)\n        self.template_string = template_string\n        self.template_file = template_file\n        self.max_dynamic_size = max_dynamic_size\n        self.placeholders = placeholders\n        if template_string is None and template_file is None:\n            raise ValueError(\"assign either template_string or template_file\")\n        if template_string is not None and template_file is not None:\n            raise ValueError(f\"assign both template_string and template_file:\\nstring:{template_string}\\nfile:{template_file}\")\n        if template_string is not None:\n            self.templates = [self.template_string]\n        else:\n            assert template_file is not None"
        },
        {
            "comment": "The code defines a class, MInstrDataset, which extends the Dataset class and implements two methods: get_template() and template_nums(). The class also uses the QuestionTemplateMixin mixin. It loads templates from a file, performs sanity checks, and initializes data. The __init__ method takes arguments like filename, image_folder, seed, etc., and sets up the random number generator for data manipulation.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/dataset/utils/mixin.py\":32-61",
            "content": "            self.templates = json.load(open(template_file, 'r', encoding='utf8'))\n        if self.max_dynamic_size is not None:\n            self.templates = self.templates[: self.max_dynamic_size]\n        # sanity check\n        assert self.placeholders is not None\n        for template in self.templates:\n            for placeholder in placeholders:\n                assert str(template).count(placeholder) == 1, f\"template: {template}\\nplaceholder:{placeholder}\"\n    def get_template(self):\n        import random\n        return random.choice(self.templates)\n    def template_nums(self):\n        return len(self.templates)\nclass MInstrDataset(QuestionTemplateMixin, Dataset):\n    _repr_indent = 4\n    def __init__(self, filename, image_folder=None, seed=None, **kwargs):\n        super().__init__(**kwargs)\n        self.filename = filename\n        self.image_folder = image_folder\n        self.rng = np.random.default_rng(seed)\n        self.data = []\n        with open(filename, 'r', encoding='utf8') as f:\n            # for line in tqdm(f, desc=f'{self.__class__.__name__} loading ann {self.filename}'):"
        },
        {
            "comment": "The code defines a class with methods to read and process data from files. It has features for getting raw items, images, templates, and supports indexing and length checks. The __repr__ method provides information about the dataset such as number of datapoints and file locations.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/dataset/utils/mixin.py\":62-95",
            "content": "            for line in f:\n                self.data.append(line)\n    def get_raw_item(self, index):\n        return json.loads(self.data[index])\n    def get_image(self, image_path):\n        if self.image_folder is not None:\n            image_path = os.path.join(self.image_folder, image_path)\n        image = read_img_general(image_path)\n        return image\n    def get_template(self):\n        return self.rng.choice(self.templates)\n    def __getitem__(self, index):\n        raise NotImplementedError\n    def __len__(self):\n        return len(self.data)\n    def __repr__(self) -> str:\n        head = \"Dataset \" + self.__class__.__name__\n        body = [\n            f\"Number of datapoints: {self.__len__()}\",\n            f\"ann file: {self.filename}\"\n        ]\n        if self.image_folder is not None:\n            body.append(f\"image folder: {self.image_folder}\")\n        body += self.extra_repr().splitlines()\n        lines = [head] + [\" \" * self._repr_indent + line for line in body]\n        return \"\\n\".join(lines)\n    # noinspection PyMethodMayBeStatic"
        },
        {
            "comment": "This method returns an empty string as the extra representation of the object.",
            "location": "\"/media/root/Prima/works/NExT-Chat/docs/src/mllm/dataset/utils/mixin.py\":96-97",
            "content": "    def extra_repr(self) -> str:\n        return \"\""
        }
    ]
}